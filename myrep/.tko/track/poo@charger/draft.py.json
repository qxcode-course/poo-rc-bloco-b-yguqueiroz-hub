{
    "patches": [
        {
            "label": "2025-10-28_14-54-02",
            "content": "@@ -2032,33 +2032,33 @@\n %0A        removed\n-_\n++\n str = str(self._\n",
            "lines": "168"
        },
        {
            "label": "2025-10-28_14-54-30",
            "content": "@@ -2400,41 +2400,8 @@\n  0:%0A\n-            self.__ligado = True%0A\n     \n",
            "lines": "168"
        },
        {
            "label": "2025-10-28_14-55-30",
            "content": "@@ -1030,24 +1030,25 @@\n elf.__capaci\n+o\n dade%7D%22%0A    %0A\n",
            "lines": "169"
        },
        {
            "label": "2025-10-28_14-56-42",
            "content": "@@ -2210,17 +2210,16 @@\n (self):%0A\n-%0A\n         \n@@ -2317,33 +2317,24 @@\n      return%0A\n-        %0A\n         if s\n@@ -2560,29 +2560,16 @@\n gado\n-:%0A             return\n+ = False\n %0A   \n",
            "lines": "169"
        },
        {
            "label": "2025-10-28_14-57-57",
            "content": "@@ -2569,32 +2569,36 @@\n igado:%0A         \n+    \n return%0A    %0A    \n",
            "lines": "172"
        },
        {
            "label": "2025-10-28_14-58-05",
            "content": "@@ -2544,34 +2544,32 @@\n (self):%0A        \n-if\n  self.__ligado:%0A\n@@ -2573,24 +2573,30 @@\n o:%0A         \n+return\n %0A    %0A    de\n",
            "lines": "172"
        },
        {
            "label": "2025-10-28_14-58-24",
            "content": "@@ -2579,31 +2579,17 @@\n         \n-   return%0A     \n+%0A\n     %0A   \n",
            "lines": "172"
        },
        {
            "label": "2025-10-28_14-58-33",
            "content": "import sys\n\nclass Charger:\n    def __init__(self, potencia: int):\n        self.__potencia = potencia\n\n    def get_potencia(self) -> int:\n        return self.__potencia\n    def __str__(self) -> str:\n        return f\"{self.__potencia}W\"\nclass Battery:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def get_carga(self) -> int:\n        return self.__carga\n    def get_capacidade(self) -> int:\n        return self.__capacidade\n    def carregar(self, tempo: int, potencia: int):\n        carga_ganha = tempo * potencia\n        self.__carga += carga_ganha\n        if self.__carga > self.__capacidade:\n            self.__carga = self.__capacidade\n\n    def gastar(self, tempo:int) -> tuple[bool, int]:\n        if tempo > self.__carga:\n            tempo_gasto = self.__carga\n            self.__carga = 0\n            return (False, tempo_gasto)\n        self.__carga -= tempo\n        return (True, tempo)\n    def __str__(self) -> str:\n        return f\"{self.__carga}/{self.__capacidade}\"\n    \nclass Notebook:\n    def __init__(self):\n        self.__ligado = False\n        self.__tempo_uso = 0\n        self.__carregador = None\n        self.__bateria = None\n\n    def set_charger(self, potencia: int):\n        if self.__carregador is not None:\n            print(\"fail: carregador j\u00e1 conectado\")\n            return\n        self.__carregador = Charger(potencia)\n\n    def rm_charger(self):\n        if self.__carregador is None:\n            print(\"fail: Sem carregador\")\n            return\n        \n        removed_str = str(self.__carregador)\n        self.__carregador = None\n        print(f\"Removido {removed_str}\")\n        self.__check_power_status()\n\n    def set_battery(self, capacidade: int):\n        if self.__bateria is not None:\n            print(\"fail: bateria ja conectada\")\n            return\n        self.__bateria = Battery(capacidade)\n\n    def rm_battery(self):\n        if self.__bateria is None:\n            print(\"fail: Sem bateria\")\n            return\n        \n        removed_str = str(self.__bateria)\n        self.__bateria = None\n        print(f\"Removido {removed_str}\")\n        self.__check_power_status()\n\n    def __check_power_status(self):\n\n        if not self.__ligado:\n            return\n\n        if self.__carregador is not None:\n            return\n        \n        if self.__bateria is not None and self.__bateria.get_carga() > 0:\n            self.__ligado = True\n            return\n        \n        print(\"fail: n\u00e3o foi possivel ligar\")\n        \n    def turn_on(self):\n        if self.__ligado:\n            return\n         \n    def use(self, tempo: int):\n        if not self.__ligado:\n            print(\"fail: desligado\")\n            return\n        \n        if self.__carregador is not None and self.__bateria is None:\n            self.__tempo_uso += tempo\n\n        elif self.__carregador is not None and self.__bateria is not None:\n            potencia = self.__carregador.get.potencia()\n            self.__bateria.carregar(tempo, potencia)\n            self.__tempo_uso += tempo\n\n        elif self.__carregador is None and self.__bateria is not None:\n            (success, tempo_gasto) = self.__bateria.gastar(tempo)\n            self.__tempo_uso += tempo_gasto\n\n            if not success:\n                print(\"fail: descaregou\")\n                self.__check_power_status()\n\n\n    def __str__(self) -> str:\n        parts = []\n        if self.__ligado:\n            parts.append(f\"ligado por {self.__tempo_uso} min\")\n        else:\n            parts.append(\"desligado\")\n\n        if self.__carregador is not None:\n            parts.append(f\"Carregador {str(self.__carregador)}\")\n\n        if self.__bateria is not None:\n            parts.append(f\"Bateria {str(self.__bateria)}\")\n        return \"Notebook: \" + \", \".join(parts)\n    \ndef main():\n    notebook = Notebook()\n\n    sys.stdin.reconfigure(encoding='utf-8')\n    sys.stdout.reconfigure(encoding='utf-8')\n\n    while True:\n        try:\n            line = input()\n            if line.strip() == \"\":\n                continue\n            print(f\"${line}\")\n            parts = line.split()\n            cmd = parts[0]\n\n            if cmd == \"end\":\n                break\n            elif cmd == \"show\":\n                print(notebook)\n            elif cmd == \"set_charger\":\n                notebook.set_charger(int(parts[1]))\n            elif cmd == \"rm_charger\":\n                notebook.rm_charger()\n            elif cmd == \"set_battery\":\n                notebook.set_battery(int(parts[1]))\n            elif cmd == \"rm_battery\":\n                notebook.rm_battery()\n            elif cmd == \"turn_on\":\n                notebook.turn_on()\n            elif cmd == \"use\":\n                notebook.use(int(parts[1]))\n            elif cmd.startswith(\"#\"):\n                pass\n            else:\n                print(\"fail: unknown command\")\n\n        except EOFError:\n            break\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "lines": "172"
        }
    ]
}