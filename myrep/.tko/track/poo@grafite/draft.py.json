{
    "patches": [
        {
            "label": "2025-10-28_13-38-36",
            "content": "@@ -1,3819 +0,0 @@\n-import sys%0A%0Aclass Lead:%0A%0A    def __init__(self, thickness: float, hardness: str, size: int):%0A        self.__thickness = thickness%0A        self.__hardness = hardness%0A        self.__size = size%0A%0A%0A    def get_thickness(self) -%3E float:%0A        return self.__thickness %0A%0A    def get_hardness(self) -%3E str:%0A        return self.__hardness%0A%0A    def get_size(self) -%3E int:%0A        return self.__size%0A%0A    def set_size(self, new_size: int):%0A        self.__size = new_size%0A%0A    def usagePerSheet(self) -%3E int:%0A        if self.__hardness == %22HB%22:%0A            return 1%0A        elif self.__hardness == %222B%22:%0A            return 2%0A        elif self.__hardness == %224B%22:%0A            return 4%0A        elif self.__hardness == %226B%22:%0A            return 6%0A        return 0%0A    %0A    def __str__(self) -%3E str:%0A        return f%22%5B%7Bself.__thickness%7D:%7Bself.__hardness%7D:%7Bself.__size%7D%5D%22%0A    %0A%0Aclass Pencil:%0A%0A    def __init__(self, thikcness: float):%0A        self.__thickness = thickness%0A        self.__tip = None%0A%0A    def hasGrafite(self) -%3E bool:%0A        return self.__tip is not None%0A    %0A    def insert(self, lead: Lead):%0A        if self.hasGrafite():%0A            print(%22fail: ja existe grafite%22)%0A            return %0A        %0A        if lead.get_thickness() != self.__thickness:%0A            print(%22fail: calibre incompativel%22)%0A            return %0A        self.__tip = lead%0A%0A    def remove(self) -%3E Lead %7C None:%0A        if not self.hasGrafite():%0A            print(%22fail: nao existe grafit%22)%0A            return None%0A        %0A        removed_lead = self.__tip%0A        self.__tip = None%0A        return removed_lead%0A    %0A    def writePage(self):%0A        if not self.hasGrafite():%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        %0A        current_size = self.__tip.get_size()%0A%0A        if current_size %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A            return %0A        usage = self.__tip.usagePerSheet()%0A        remaining_size = current_size - usage%0A        if remaining_size %3C 10:%0A            self.__tip.set_size(10)%0A            print(%22fail: folha incompleta%22)%0A        else:%0A            self.__tip.set_size(remaining_size)%0A    def __str__(self) -%3E str:%0A        calibre_str = f%22%7Bself.__thickness:.1f%7D%22%0A        tip_str = str(self.__tip) if self.hasGrafite() else %22null%22%0A        return f%22calibre: %7Bcalibre_str%7D, grafite: %7Btip_str%7D%22%0A    %0A%0Adef main():%0A%0A    pencil = None%0A%0A    sys.stdin.reconfigure(encoding='utf-8')%0A    sys.stdout.reconfigure(encoding='utf-8')%0A%0A    while true:%0A        try:%0A            line = input()%0A            if line.strip() == %22%22:%0A                continue%0A%0A            print(f%22$%7Bline%7D%22)%0A            parts = line.split()%0A            cmd = parts%5B0%5D%0A%0A            if cmd == %22end%22:%0A                break%0A            elif cmd == %22init%22:%0A                pencil = Pencil(float(parts%5B1%5D))%0A%0A            elif cmd == %22show%22:%0A                if pencil:%0A                    print(pencil)%0A            elif cmd == %22insert%22:%0A                if pencil:%0A                    lead = Lead(float(parts%5B1%5D), parts%5B2%5D, int(parts%5B3%5D))%0A                    pencil.insert(lead)%0A                else:%0A                    print(%22fail: lapiseira nao iniciada%22)%0A            elif cmd == %22remove%22:%0A                if pencil:%0A                    pencil.remove()%0A                else:%0A                    print(%22fail: lapiseira nao iniciada%22)%0A            elif cmd == %22write%22:%0A                if pencil:%0A                    pencil.writePage()%0A                else:%0A                    print(%22fail: lapiseira nao iniciada%22)%0A            elif cmd.startswith(%22#%22):%0A                pass%0A            else:%0A                print(%22fail: unknown command%22)%0A        except EOFError:%0A            break%0A        except Exception as e:%0A            print(f%22an error occurred: %7Be%7D%22)%0A            break%0Aif __name__ == %22__main__%22:%0A    main()%0A            \n",
            "lines": "0"
        },
        {
            "label": "2025-10-28_14-17-22",
            "content": "@@ -2470,9 +2470,9 @@\n ile \n-T\n+t\n rue:\n",
            "lines": "141"
        },
        {
            "label": "2025-10-28_14-17-40",
            "content": "@@ -888,34 +888,34 @@\n init__(self, thi\n-c\n k\n+c\n ness: float):%0A  \n",
            "lines": "141"
        },
        {
            "label": "2025-10-28_14-18-49",
            "content": "import sys\n\nclass Lead:\n\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness = thickness\n        self.__hardness = hardness\n        self.__size = size\n\n\n    def get_thickness(self) -> float:\n        return self.__thickness \n\n    def get_hardness(self) -> str:\n        return self.__hardness\n\n    def get_size(self) -> int:\n        return self.__size\n\n    def set_size(self, new_size: int):\n        self.__size = new_size\n\n    def usagePerSheet(self) -> int:\n        if self.__hardness == \"HB\":\n            return 1\n        elif self.__hardness == \"2B\":\n            return 2\n        elif self.__hardness == \"4B\":\n            return 4\n        elif self.__hardness == \"6B\":\n            return 6\n        return 0\n    \n    def __str__(self) -> str:\n        return f\"[{self.__thickness}:{self.__hardness}:{self.__size}]\"\n    \n\nclass Pencil:\n\n    def __init__(self, thickness: float):\n        self.__thickness = thickness\n        self.__tip = None\n\n    def hasGrafite(self) -> bool:\n        return self.__tip is not None\n    \n    def insert(self, lead: Lead):\n        if self.hasGrafite():\n            print(\"fail: ja existe grafite\")\n            return \n        \n        if lead.get_thickness() != self.__thickness:\n            print(\"fail: calibre incompativel\")\n            return \n        self.__tip = lead\n\n    def remove(self) -> Lead | None:\n        if not self.hasGrafite():\n            print(\"fail: nao existe grafit\")\n            return None\n        \n        removed_lead = self.__tip\n        self.__tip = None\n        return removed_lead\n    \n    def writePage(self):\n        if not self.hasGrafite():\n            print(\"fail: nao existe grafite\")\n            return\n        \n        current_size = self.__tip.get_size()\n\n        if current_size <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return \n        usage = self.__tip.usagePerSheet()\n        remaining_size = current_size - usage\n        if remaining_size < 10:\n            self.__tip.set_size(10)\n            print(\"fail: folha incompleta\")\n        else:\n            self.__tip.set_size(remaining_size)\n    def __str__(self) -> str:\n        calibre_str = f\"{self.__thickness:.1f}\"\n        tip_str = str(self.__tip) if self.hasGrafite() else \"null\"\n        return f\"calibre: {calibre_str}, grafite: {tip_str}\"\n    \n\ndef main():\n\n    pencil = None\n\n    sys.stdin.reconfigure(encoding='utf-8')\n    sys.stdout.reconfigure(encoding='utf-8')\n\n    while True:\n        try:\n            line = input()\n            if line.strip() == \"\":\n                continue\n\n            print(f\"${line}\")\n            parts = line.split()\n            cmd = parts[0]\n\n            if cmd == \"end\":\n                break\n            elif cmd == \"init\":\n                pencil = Pencil(float(parts[1]))\n\n            elif cmd == \"show\":\n                if pencil:\n                    print(pencil)\n            elif cmd == \"insert\":\n                if pencil:\n                    lead = Lead(float(parts[1]), parts[2], int(parts[3]))\n                    pencil.insert(lead)\n                else:\n                    print(\"fail: lapiseira nao iniciada\")\n            elif cmd == \"remove\":\n                if pencil:\n                    pencil.remove()\n                else:\n                    print(\"fail: lapiseira nao iniciada\")\n            elif cmd == \"write\":\n                if pencil:\n                    pencil.writePage()\n                else:\n                    print(\"fail: lapiseira nao iniciada\")\n            elif cmd.startswith(\"#\"):\n                pass\n            else:\n                print(\"fail: unknown command\")\n        except EOFError:\n            break\n        except Exception as e:\n            print(f\"an error occurred: {e}\")\n            break\nif __name__ == \"__main__\":\n    main()\n            ",
            "lines": "141"
        }
    ]
}